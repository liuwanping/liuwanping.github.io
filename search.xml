<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java用父类声明new子类对象VS用子类声明new子类对象的区别]]></title>
    <url>%2F2019%2F01%2F09%2FJava%E7%94%A8%E7%88%B6%E7%B1%BB%E5%A3%B0%E6%98%8Enew%E5%AD%90%E7%B1%BB%E5%AF%B9%E8%B1%A1VS%E7%94%A8%E5%AD%90%E7%B1%BB%E5%A3%B0%E6%98%8Enew%E5%AD%90%E7%B1%BB%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[Father a = new Son();Son b = new Son(); 1. a只能调用Faher中有的函数，不能调用Son中新添加的函数，同时如果Son中有覆盖掉Father的函数，访问的是Son中的函数，也就是说引用a与实例方法动态绑定。 a访问Father中有的函数：输出结果如下，可以看到调用的是子类的方法： a访问Father中没有的函数输出结果如下，报错： 2. 但是引用a与成员变量、静态方法静态绑定，也就是说，a只能访问a里的成员变量、静态方法，即使b里有同名的成员变量、静态方法。 输出结果： 3. b可以调用Father里的函数，也可以调用Son里另外添加的函数。 输出结果： 综上：Father a = new Son();Son b = new Son(); a只能调用Father中有的函数，不能调用Son中新添加的函数，同时如果Son中有覆盖掉Father的函数，访问的是Son中的函数，也就是说引用a与实例方法动态绑定。 但是引用a与成员变量、静态方法静态绑定，也就是说，a只能访问a里的成员变量、静态方法，即使b里有同名的成员变量、静态方法。 b可以调用Father里的函数，也可以调用Son里的函数。 对构造函数的执行，二者没有区别，都是先父后子。]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode | Palindrome Partitioning II]]></title>
    <url>%2F2018%2F11%2F12%2FLeetCode-Palindrome-Partitioning-II%2F</url>
    <content type="text"><![CDATA[题目描述： Given a string s, partition s such that every substring of the partition is a palindrome.Return the minimum cuts needed for a palindrome partitioning of s. Example:Input: “aab”Output: 1 Explanation: The palindrome partitioning [“aa”,”b”] could be produced using 1 cut. Solution：使用动态规划，求最优解朝着动态规划这个方向想。12345678910111213141516171819202122232425 public int minCut(String s) &#123; int n = s.length(); boolean dp[][] = new boolean[n][n];//判断是否是回文串 int cut[] = new int[n];//存储最小cut值 int min; for (int i = 0; i &lt; n; i++) &#123;//i是substring的尾部 min = i; for (int j = 0; j &lt;= i ; j++) &#123;//j是substring的头部 //j+1 &gt; i-1表示对角线部分，也就是一个字符作为一个回文串substring if (s.charAt(i) == s.charAt(j) &amp;&amp; (j+1 &gt; i-1 || dp[j+1][i-1])) &#123; dp[j][i] = true; if(j == 0)//表示尾部第i个和头部第一个字符相同，而且中间也是回文串，也就是这个串就是一个回文串，所以cut值直接就是0 min = 0; else //此时表示s.substring(j,i+1)是个回文串，也就是s[j]~s[i]之间的字符构成一个回文串 //注意关键在这个cut[j-1]而不是cut[i-1], //cut[j-1]表示是s[j-1]之前的最小的cut值， //此时是s[j]~s[i]是一个回文串，所以cut[i]之间从cut[j-1]加1即可 min = Math.min(min, cut[j-1]+1); &#125; &#125; cut[i] = min;&#125; return cut[n-1]; &#125;]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指Offer | 圆圈中最后剩下的数(约瑟夫环问题)]]></title>
    <url>%2F2018%2F10%2F31%2F%E5%89%91%E6%8C%87Offer-%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0-%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[题目描述： 每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。HF作为牛客的资深元老,自然也准备了一些小游戏。其中,有个游戏是这样的:首先,让小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0…m-1报数….这样下去….直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1) 方法1：用链表模拟很好理解，依次删除结点，剩下最后一个即为最后结果。123456789101112131415161718192021222324252627282930/*public class Node_List &#123; int val; Node_List next = null; Node_List(int val)&#123; this.val = val; &#125;&#125;*/public static int LastRemaining_Solution(int n, int m) &#123; Node_List cur = new Node_List(0); Node_List head = cur; for (int i = 1; i &lt; n; i++) &#123; Node_List node= new Node_List(i); cur.next = node; cur = node; &#125; cur.next = head; Node_List p = cur; Node_List q = head; while (q.next.val!=q.val) &#123; for (int i = 0; i &lt; m-1; i++) &#123; p = p.next; q = q.next; &#125; p.next = q.next; q = q.next; &#125; return q.val;&#125; 方法2：链表选用LinkedList实现，较方法1可以提高一定效率。 public static int LastRemaining_Solution(int n, int m) { LinkedList&lt;Integer&gt; list = new LinkedList&lt;Integer&gt;(); for (int i = 0; i &lt; n; i++) list.add(i); int p = 0; while (list.size()&gt;1) { p = (p+m-1)%list.size();//注意这里使得可以从尾部跳回到头部 list.remove(p); } return list.size()==1?list.get(0):-1; } 方法3：当数据量比较大时，以上两种方法时间和空间都比较大，因此用归纳法找到规律然后利用递归。 0，1，2，3，……，m-2，m-1，m，……，n-1 (总共n个数，删除第m-1个数) 下次删的时候从下面第一行这个序列开始往后数，我们把这个序列用第二行的序列进行重新标号，根据第二行的标号来找对应第一行的标号，从第二行看很容易看出要删除的是m-1，那么第二行的m-1对应第一行的哪个数呢？ m m+1 m+2 … m-1+m … n-1 0 1 2 … m-2 0 1 2 … m-1 … n-1-m n-m n-m+1 n-m+2 … n-1 也就是第二行的任意一个数p对应第一行哪个数？如果p &lt;= n-m，第二行的m-1对应第一行的 p+m；如果p&gt; n-m，第二行的m-1对应第一行的 (p+m)%n； 综上，合并以上两种情况，若第二行的数是p，则对应的第一行数是(p+m)%n。 public static int LastRemaining_Solution(int n, int m) { if(n == 0) return -1; else if(n == 1) return 0; else return (LastRemaining_Solution(n-1,m)+m)%n; }]]></content>
      <categories>
        <category>剑指Offer</category>
      </categories>
      <tags>
        <tag>剑指Offer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java中char，int，String的相加减]]></title>
    <url>%2F2018%2F10%2F31%2FJava%E4%B8%ADchar%EF%BC%8Cint%EF%BC%8CString%E7%9A%84%E7%9B%B8%E5%8A%A0%E5%87%8F%2F</url>
    <content type="text"><![CDATA[要点： char与int ：可以相加减；int取本身数值，char取对应的ASCII码值；得到的结果是ASCII码增大或减小了int对应的数值大小；如果结果赋值给char类型的变量即是该ASCII码对应的字符，如果赋值给int类型的变量即是该ASCII码的大小。12345678public class Test &#123; public static void main(String[] args) &#123; char c = '2'-3;//'2'的ASCII码:50 int i = '2'-3; System.out.println("c:"+c);//'/'的ASCII码:47 System.out.println("i:"+i); &#125;&#125; c:/i:47 char与char ：可以相加减；都取各自对应的ASCII码进行加减；如果结果赋值给char类型的变量即是该ASCII码对应的字符，如果赋值给int类型的变量即是该ASCII码的大小。12345678public class Test &#123; public static void main(String[] args) &#123; char c = 'a'-'1';//'a'的ASCII码：97，'1'的ASCII码：49 int i = 'a'-'1'; System.out.println("c:"+c);//'0'的ASCII码：48 System.out.println("i:"+i); &#125;&#125; c:0i:48 String与int ：只能加不能减；得到的结果为String类型。123456public class Test &#123; public static void main(String[] args) &#123; String s = "2"+3; System.out.println("s:"+s); &#125;&#125; s:23 例题： 把字符串转换成整数。将一个字符串转换成一个整数(实现Integer.valueOf(string)的功能，但是string不符合数字要求时返回0)，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0。输入描述:输入一个字符串,包括数字字母符号,可以为空输出描述:如果是合法的数值表达则返回该数字，否则返回0123456789101112public static int StrToInt(String str) &#123; if(!str.matches("(-|\\+)?\\d+"))//匹配可能带有正负号的数字形式的字符串 return 0; int res = 0; int flag = 1; char strArr[] = str.toCharArray(); if(strArr[0] == '-') flag = -1; for (int i = (strArr[0]=='+'||strArr[0]=='-')?1:0; i &lt; strArr.length; i++) res = res*10 + strArr[i] - '0';//注意这里根据strArr[i] - '0'的差值得到strArr[i]对应的数字 return res*flag;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java中的逻辑与&，短路与&&，逻辑或|，短路或||]]></title>
    <url>%2F2018%2F10%2F31%2FJava%E4%B8%AD%E7%9A%84%E9%80%BB%E8%BE%91%E4%B8%8E-%EF%BC%8C%E7%9F%AD%E8%B7%AF%E4%B8%8E-%EF%BC%8C%E9%80%BB%E8%BE%91%E6%88%96-%EF%BC%8C%E7%9F%AD%E8%B7%AF%E6%88%96%2F</url>
    <content type="text"><![CDATA[区别： 逻辑与&amp; ：&amp;左右两边都判断再得出结果；可以计算boolean类型的与，也可以计算int类型数字的按位与。 短路与&amp;&amp; ：如果&amp;&amp;的左边为false，则右边不看直接得出结果；只能计算boolean类型的与。 逻辑或| ：|左右两边都判断再得出结果；可以计算boolean类型的或，也可以计算int类型数字的按位或。 短路或|| ：如果||的左边为true，则右边不看直接得出结果；只能计算boolean类型的或。 例题： 求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。 12345public static int Sum_Solution(int n) &#123; int res = n; boolean b = res!=0 &amp;&amp; (res+=Sum_Solution(n-1))&gt;0; return res;&#125; 当递归到n = 0时，&amp;&amp;左边为false不看右边直接得出b = false，这条语句完成，接下来return 0，相当于递归出口，这时程序开始往上返。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试文]]></title>
    <url>%2F2018%2F10%2F27%2F%E6%B5%8B%E8%AF%95%E6%96%87%2F</url>
    <content type="text"><![CDATA[测试一下@(示例笔记本)[马克飞象|帮助|Markdown] 马克飞象是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述： 功能丰富 ：支持高亮代码块、LaTeX 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手； 得心应手 ：简洁高效的编辑器，提供桌面客户端以及离线Chrome App，支持移动端 Web； 深度整合 ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。 [TOC] Markdown简介 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。 —— 维基百科 正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为粗体或者斜体，创建一个链接或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按Ctrl + /查看帮助。 代码块12345678910@requires_authorizationdef somefunc(param1='', param2=0): '''A docstring''' if param1 &gt; param2: # interesting print 'Greater' return (param2 - param1 + 1) or Noneclass SomeClass: pass&gt;&gt;&gt; message = '''interpreter... prompt''' LaTeX 公式可以创建行内公式，例如 $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。或者块级公式： $$ x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$ 表格 Item Value Qty Computer 1600 USD 5 Phone 12 USD 12 Pipe 1 USD 234 流程图12345678st=&gt;start: Starte=&gt;endop=&gt;operation: My Operationcond=&gt;condition: Yes or No?st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 以及时序图: 123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 提示：想了解更多，请查看流程图语法以及时序图语法。 复选框使用 - [ ] 和 - [x] 语法可以创建复选框，实现 todo-list 等功能。例如： 已完成事项 待办事项1 待办事项2 注意：目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在马克飞象中修改 Markdown 原文才可生效。下个版本将会全面支持。 印象笔记相关笔记本和标签马克飞象增加了@(笔记本)[标签A|标签B]语法, 以选择笔记本和添加标签。 绑定账号后， 输入(自动会出现笔记本列表，请从中选择。 笔记标题马克飞象会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 欢迎使用马克飞象。 快捷编辑保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到马克飞象中打开并编辑该笔记。 注意：目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。 数据同步马克飞象通过将Markdown原文以隐藏内容保存在笔记中的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。 隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。 离线存储马克飞象使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过文档管理打开。 注意：虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，请务必经常及时同步到印象笔记。 编辑器相关设置右侧系统菜单（快捷键Ctrl + M）的设置中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。 快捷键帮助 Ctrl + /同步文档 Ctrl + S创建文档 Ctrl + Alt + N最大化编辑器 Ctrl + Enter预览文档 Ctrl + Alt + Enter文档管理 Ctrl + O系统菜单 Ctrl + M 加粗 Ctrl + B插入图片 Ctrl + G插入链接 Ctrl + L提升标题 Ctrl + H 关于收费马克飞象为新用户提供 10 天的试用期，试用期过后需要续费才能继续使用。未购买或者未及时续费，将不能同步新的笔记。之前保存过的笔记依然可以编辑。 反馈与建议 微博：@马克飞象，@GGock 邮箱：&#104;&#117;&#115;&#116;&#x67;&#111;&#99;&#x6b;&#64;&#103;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#109; 感谢阅读这份帮助文档。请点击右上角，绑定印象笔记账号，开启全新的记录与分享体验吧。 [^demo]: 这是一个示例脚注。请查阅 MultiMarkdown 文档 关于脚注的说明。 限制： 印象笔记的笔记内容使用 ENML 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致脚注和TOC无法正常点击。]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
